insecure.js just automatically trusts the userId sent in the request, when really any authenticated user can send a request with any userId, for instance the userId of an admin. secure.js instead uses session based userIds which are set right when the user logs in. The server can check the known userId before allowing any operation. For additional security, you could also use 2FA and set time limits for user sessions to make it harder for an attacker to complete their attack during the course of a session. You can also make sure that even the 'admin' accounts only have the minimum abilities that they need to be able to have.
