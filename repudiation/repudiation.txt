- Briefly explain the vulnerability and why the secure version is better at preventing repudiation than the insecure version.
- What additional security mechanisms can you incorporate to prevent such attacks?

Secure.js writes to a persistent file instead of just using console.log, so that the actions that there is a permanent record of sent and recieved messages, along with the IP addresss and time of each request. This is done via middleware so that it's easy for it to be implemented across the entire application so that you have complete logging coverage. There's also explicit checks for if requests are coming from an authenticated user. With all of these measures, it's much easier to prove that a speicific user with an authenticated login made specific requests of the server at specific times. This makes it very difficult for someone to say that they did not do something. In addition, you could also encrypt logs to make them more resistent to tampering, and run regular audits of logs to note any suspicious behavior before it becomes a problem. 
